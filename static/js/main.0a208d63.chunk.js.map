{"version":3,"sources":["Components/Workspace/Workspace.js","Components/CodeEditor/CodeEditor.js","actions/codeActions.js","Components/ChatBot/ChatBot.js","actions/chatBotActions.js","Components/Tabs/Tabs.js","actions/tabsActions.js","Components/Header/Header.js","Components/App.js","serviceWorker.js","reducers/chatBotReducer.js","reducers/tabsReducer.js","reducers/codeReducer.js","store/store.js","index.js"],"names":["vm","require","global","translates","i","f","t","a","axios","method","url","params","key","text","lang","format","res","data","Workspace","props","state","msgBot","executeLogic","msg","codemsg","tabs","code","sandbox","inputText","translate","from","to","globalVar","createContext","runInNewContext","r","setState","type","img","class","this","responseBot","Component","connect","chatBotReducer","tabsReducer","dispatch","CodeEditor","onChange","newValue","e","CodeChange","editor","monaco","focus","width","height","language","theme","value","tabsData","currentTab","options","selectOnLineNumbers","languages","autoIndent","features","editorDidMount","payload","ChatBot","msgList","visible","msgBtnClick","push","nextProps","className","map","item","alt","src","InputGroup","FormControl","target","placeholder","as","aria-label","Button","onClick","variant","callLogic","CustomTabs","handleAddTab","newTabObject","id","length","name","AddTab","handleDeleteTab","DeleteTab","Tabs","activeKey","onSelect","k","SelectTab","tab","Tab","eventKey","title","size","Header","Navbar","Brand","href","App","Boolean","window","location","hostname","match","action","filter","findIndex","obj","codeReducer","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","combineReducers","applyMiddleware","thunk","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.0a208d63.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\n\r\nimport CodeEditor from \"../CodeEditor/CodeEditor\";\r\nimport ChatBot from \"../ChatBot/ChatBot\";\r\nimport { connect } from \"react-redux\";\r\nimport \"./Workspace.css\";\r\nimport CustomTabs from \"../Tabs/Tabs\";\r\nimport axios from \"axios\";\r\n\r\nconst vm = require(\"vm\");\r\n\r\nlet ck12 = {};\r\nck12.val = 0;\r\nglobal.translates = async (i, f, t) => {\r\n  const res = await axios({\r\n    method: \"get\",\r\n    url: `https://translate.yandex.net/api/v1.5/tr.json/translate`,\r\n    params: {\r\n      key:\r\n        \"trnsl.1.1.20200326T192911Z.b69a94e545e49c8a.e6cc2a6f7f0eed242d116d3bbb53c6927a62d174\",\r\n      text: i,\r\n      lang: f + \"-\" + t,\r\n      format: \"plain\"\r\n    }\r\n  });\r\n\r\n  const data = res;\r\n\r\n  return data.data.text[0];\r\n};\r\nclass Workspace extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n  }\r\n  state = {\r\n    msgBot: \"\"\r\n  };\r\n\r\n  executeLogic = async msg => {\r\n    let a = this.props.codemsg.tabs[0].code;\r\n\r\n    const code = a;\r\n    const sandbox = {\r\n      global: global,\r\n      inputText: msg,\r\n      translate(msg, from, to) {\r\n        global.globalVar = {\r\n          msg: msg,\r\n          from: from,\r\n          to: to\r\n        };\r\n      }\r\n    };\r\n\r\n    vm.createContext(sandbox);\r\n    let r = await vm.runInNewContext(code, sandbox);\r\n\r\n    this.setState({\r\n      msgBot: {\r\n        type: \"in\",\r\n        msg: r,\r\n        img:\r\n          \"https://cdn3.iconfinder.com/data/icons/chat-bot-emoji-blue-filled-color/300/14134081Untitled-3-512.png\"\r\n      }\r\n    });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <div class=\"d-md-flex h-md-100 align-items-center workspace\">\r\n          <div class=\"col-md-6 p-0 h-md-100 left_pane\">\r\n            <CustomTabs></CustomTabs>\r\n            <CodeEditor></CodeEditor>\r\n          </div>\r\n\r\n          <div class=\"col-md-6 p-0 h-md-100\">\r\n            <div class=\"container right_pane\">\r\n              <ChatBot\r\n                executeLogic={this.executeLogic}\r\n                responseBot={this.state.msgBot}\r\n              ></ChatBot>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nconst mapStateToProps = state => {\r\n  return {\r\n    msg: state.chatBotReducer,\r\n    codemsg: state.tabsReducer\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {};\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Workspace);\r\n","import React, { Component } from \"react\";\r\nimport { render } from \"react-dom\";\r\nimport MonacoEditor from \"react-monaco-editor\";\r\nimport { connect } from \"react-redux\";\r\nimport CodeChange from \"../../actions/codeActions\";\r\nclass CodeEditor extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n  }\r\n\r\n  editorDidMount(editor, monaco) {\r\n    editor.focus();\r\n  }\r\n  onChange = (newValue, e) => {\r\n    this.props.CodeChange(newValue);\r\n  };\r\n\r\n  render() {\r\n    const options = {\r\n      selectOnLineNumbers: true,\r\n      languages: [\"javascript\"],\r\n      autoIndent: true,\r\n      \r\n      \"formatOnPaste\": true,\r\n      \"formatOnType\": true,\r\n      features: [\r\n        \"accessibilityHelp\",\r\n        \"bracketMatching\",\r\n        \"caretOperations\",\r\n        \"clipboard\",\r\n        \"codeAction\",\r\n        \"codelens\",\r\n        \"colorDetector\",\r\n        \"comment\",\r\n        \"contextmenu\",\r\n        \"coreCommands\",\r\n        \"cursorUndo\",\r\n        \"dnd\",\r\n        \"find\",\r\n        \"folding\",\r\n        \"fontZoom\",\r\n        \"format\",\r\n        \"gotoError\",\r\n        \"gotoLine\",\r\n        \"gotoSymbol\",\r\n        \"hover\",\r\n        \"iPadShowKeyboard\",\r\n        \"inPlaceReplace\",\r\n        \"inspectTokens\",\r\n        \"linesOperations\",\r\n        \"links\",\r\n        \"multicursor\",\r\n        \"parameterHints\",\r\n        \"quickCommand\",\r\n        \"quickOutline\",\r\n        \"referenceSearch\",\r\n        \"rename\",\r\n        \"smartSelect\",\r\n        \"snippets\",\r\n        \"suggest\",\r\n        \"toggleHighContrast\",\r\n        \"toggleTabFocusMode\",\r\n        \"transpose\",\r\n        \"wordHighlighter\",\r\n        \"wordOperations\",\r\n        \"wordPartOperations\"\r\n      ]\r\n    };\r\n    return (\r\n      <>\r\n        <MonacoEditor\r\n          width=\"760\"\r\n          height=\"500\"\r\n          language=\"javascript\"\r\n          theme=\"vs-dark\"\r\n          value={this.props.tabsData.currentTab?.code}\r\n          options={options}\r\n          onChange={this.onChange}\r\n          editorDidMount={this.editorDidMount}\r\n        />\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    tabsData: state.tabsReducer\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    CodeChange: code => {\r\n      dispatch(CodeChange(code));\r\n    }\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(CodeEditor);\r\n","export default function CodeChange(code) {\r\n  return {\r\n    type: \"CODE_CHANGE\",\r\n    payload: code\r\n  };\r\n}\r\n","import React, { Component } from \"react\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport InputGroup from \"react-bootstrap/InputGroup\";\r\nimport FormControl from \"react-bootstrap/FormControl\";\r\nimport { connect } from \"react-redux\";\r\nimport { callLogic } from \"../../actions/chatBotActions\";\r\nimport \"./ChatBot.css\";\r\nclass ChatBot extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n  }\r\n\r\n  state = {\r\n    msg: \"\",\r\n    msgList: [\r\n      {\r\n        type: \"in\",\r\n        msg: \"Hi\",\r\n        img:\r\n          \"https://cdn3.iconfinder.com/data/icons/chat-bot-emoji-blue-filled-color/300/14134081Untitled-3-512.png\"\r\n      }\r\n    ],\r\n    visible: false\r\n  };\r\n\r\n  componentWillReceiveProps(nextProps) {\r\n    this.setState({ msgList: [...this.state.msgList, nextProps.responseBot] });\r\n    this.setState({ visible: false });\r\n  }\r\n  msgBtnClick = () => {\r\n    this.setState({ visible: true });\r\n    let msg = {\r\n      type: \"out\",\r\n      msg: this.state.msg,\r\n      img:\r\n        \"https://www.pngfind.com/pngs/m/292-2924858_user-icon-business-man-flat-png-transparent-png.png\"\r\n    };\r\n\r\n    this.state.msgList.push(msg);\r\n\r\n    let a = this.state.msg;\r\n    this.props.executeLogic(a);\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <div className=\"card\">\r\n          <div className=\"card-body\">\r\n            <ul className=\"chat-list\">\r\n              {this.state.msgList.map((item, i) => (\r\n                <li className={item.type}>\r\n                  <div className=\"chat-img\">\r\n                    <img alt=\"Avtar\" src={item.img} />\r\n                  </div>\r\n                  <div className=\"chat-body\">\r\n                    <div className=\"chat-message\">\r\n                      <p>{item.msg}</p>\r\n                    </div>\r\n                  </div>\r\n                </li>\r\n              ))}\r\n              {this.state.visible === true && (\r\n                <div className=\"lds-ellipsis\">\r\n                  <div></div>\r\n                  <div></div>\r\n                  <div></div>\r\n                  <div></div>\r\n                </div>\r\n              )}\r\n            </ul>\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"card-input\">\r\n          <div className=\"card-input-body\">\r\n            <InputGroup>\r\n              <FormControl\r\n                onChange={e => {\r\n                  this.setState({ msg: e.target.value });\r\n                }}\r\n                placeholder=\"Enter message here...\"\r\n                as=\"textarea\"\r\n                aria-label=\"With textarea\"\r\n              ></FormControl>\r\n              <Button className=\"abtn\" onClick={this.msgBtnClick} variant=\"primary\">\r\n              Send\r\n            </Button>\r\n            </InputGroup>\r\n            \r\n          </div>\r\n        </div>\r\n\r\n        {/* <input type=\"text\" onChange={(e)=>{this.setState({msg:e.target.value})}}></input> */}\r\n      </div>\r\n    );\r\n  }\r\n}\r\nconst mapStateToProps = state => {\r\n  return {\r\n    msgList: state.chatBotReducer\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    callLogic: msg => {\r\n      dispatch(callLogic(msg));\r\n    }\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ChatBot);\r\n","export function callLogic(msg) {\r\n  return {\r\n    type: \"CALL_LOGIC\",\r\n    payload: msg\r\n  };\r\n}\r\n","import React, { Component, useState } from \"react\";\r\nimport Tabs from \"react-bootstrap/Tabs\";\r\nimport Tab from \"react-bootstrap/Tab\";\r\nimport \"./Tabs.css\";\r\nimport { connect } from \"react-redux\";\r\nimport { AddTab, SelectTab, DeleteTab } from \"../../actions/tabsActions\";\r\n\r\nimport Button from \"react-bootstrap/Button\";\r\nimport Spinner from \"react-bootstrap/Spinner\";\r\nclass CustomTabs extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n  }\r\n\r\n  handleAddTab = () => {\r\n    const newTabObject = {\r\n      id: this.props.tabsData.tabs.length + 1,\r\n      name: `Tab ${this.props.tabsData.tabs.length + 1}`,\r\n      code: \"//Start Writing Your Code\"\r\n    };\r\n    this.props.AddTab(newTabObject);\r\n  };\r\n\r\n  handleDeleteTab = id => {\r\n    if (id === 1) {\r\n      return false;\r\n    }\r\n    this.props.DeleteTab(id);\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <div className=\"container\">\r\n          <div className=\"row\">\r\n            <Tabs\r\n              id=\"cuTab\"\r\n              activeKey={this.props.tabsData.key}\r\n              onSelect={k => {\r\n                this.props.SelectTab(k);\r\n              }}\r\n            >\r\n              {this.props.tabsData.tabs.map((tab, i) => (\r\n                <Tab\r\n                  key={i}\r\n                  eventKey={tab.id}\r\n                  title={\r\n                    <div>\r\n                      {tab.name} &nbsp;{\" \"}\r\n                      <i\r\n                        onClick={() => this.handleDeleteTab(tab.id)}\r\n                        className=\"fa fa-times\"\r\n                      ></i>\r\n                    </div>\r\n                  }\r\n                ></Tab>\r\n              ))}\r\n\r\n              <Tab\r\n                title={\r\n                  <i onClick={this.handleAddTab} className=\"fa fa-plus\"></i>\r\n                }\r\n              ></Tab>\r\n            </Tabs>\r\n\r\n            <Button className=\"mybtn\" variant=\"outline-light\" size=\"sm\">\r\n              {/* <Spinner\r\n                        as=\"span\"\r\n                        animation=\"border\"\r\n                        size=\"sm\"\r\n                        role=\"status\"\r\n                        aria-hidden=\"true\"\r\n                    /> */}\r\n              Apply Changes\r\n            </Button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    tabsData: state.tabsReducer\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    AddTab: tab => {\r\n      dispatch(AddTab(tab));\r\n    },\r\n    SelectTab: id => {\r\n      dispatch(SelectTab(id));\r\n    },\r\n    DeleteTab: id => {\r\n      dispatch(DeleteTab(id));\r\n    }\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(CustomTabs);\r\n","// export function callLogic(name){\r\n//     return dispatch => {\r\n//         setTimeout(()=>{\r\n//             dispatch({\r\n//                 type: \"SET_NAME\",\r\n//                 payload: name\r\n//             });\r\n//         },2000);\r\n//     }\r\n// }\r\nexport function AddTab(tab) {\r\n  return {\r\n    type: \"ADD_TAB\",\r\n    payload: tab\r\n  };\r\n}\r\n\r\nexport function SelectTab(id) {\r\n  return {\r\n    type: \"SEL_TAB\",\r\n    payload: id\r\n  };\r\n}\r\n\r\nexport function DeleteTab(id) {\r\n  return {\r\n    type: \"DEL_TAB\",\r\n    payload: id\r\n  };\r\n}\r\n","import React, { Component } from \"react\";\r\nimport { Navbar, Nav } from \"react-bootstrap\";\r\nimport \"./Header.css\";\r\nclass Header extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Navbar className=\"navbar-custom\">\r\n          <Navbar.Brand href=\"#home\">\r\n            <span className=\"ai_playground\">AI Playground</span>\r\n          </Navbar.Brand>\r\n        </Navbar>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Header;\r\n","import React from \"react\";\nimport \"./App.css\";\n\nimport Header from \"./Header/Header\";\nimport Workspace from \"./Workspace/Workspace\";\nfunction App(props) {\n  return (\n    <div className=\"App\">\n      <Header></Header>\n      <Workspace></Workspace>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","const chatBotReducer = (\r\n  state = {\r\n    msg: \"\"\r\n  },\r\n  action\r\n) => {\r\n  switch (action.type) {\r\n    case \"CALL_LOGIC\":\r\n      state = {\r\n        ...state,\r\n        msg: action.payload\r\n      };\r\n      break;\r\n  }\r\n  return state;\r\n};\r\nexport default chatBotReducer;\r\n","const tabsReducer = (\r\n  state = {\r\n    tabs: [\r\n      {\r\n        id: 1,\r\n        name: \"Tab 1\",\r\n        code: ` async function respond(inputText){\r\nconst res = await global.translates(inputText,\"en\",\"hi\");  \r\n                  \r\nreturn res;\r\n}\r\nrespond(inputText);`\r\n      }\r\n    ],\r\n    currentTab: {\r\n      id: 1,\r\n      name: \"Tab 1\",\r\n      code: `async function respond(inputText){\r\n        const res = await global.translates(inputText,\"en\",\"hi\");  \r\n                          \r\n        return res;\r\n        }\r\n        respond(inputText);`\r\n    },\r\n    key: 1\r\n  },\r\n  action\r\n) => {\r\n  switch (action.type) {\r\n    case \"ADD_TAB\":\r\n      state = {\r\n        ...state,\r\n        tabs: [...state.tabs, action.payload]\r\n      };\r\n\r\n      break;\r\n    case \"SEL_TAB\":\r\n      state = {\r\n        ...state,\r\n\r\n        key: action.payload,\r\n        currentTab: state.tabs.filter(item => item.id == action.payload)[0]\r\n      };\r\n\r\n      break;\r\n    case \"DEL_TAB\":\r\n      state = {\r\n        ...state,\r\n        tabs: state.tabs.filter(item => item.id != action.payload)\r\n      };\r\n\r\n      break;\r\n    case \"CODE_CHANGE\":\r\n      state = {\r\n        ...state,\r\n        currentTab: {\r\n          ...state.currentTab,\r\n          code: action.payload\r\n        }\r\n      };\r\n\r\n      let tabs = [...state.tabs];\r\n\r\n      let tab = [...tabs.filter(item => item.id == state.currentTab.id)][0];\r\n\r\n      tab.code = action.payload;\r\n\r\n      tabs[tabs.findIndex(obj => obj.id === state.currentTab.id)] = tab;\r\n\r\n      break;\r\n  }\r\n  return state;\r\n};\r\nexport default tabsReducer;\r\n","const codeReducer = (\r\n  state = {\r\n    msg: \"\"\r\n  },\r\n  action\r\n) => {\r\n  switch (action.type) {\r\n  }\r\n  return state;\r\n};\r\nexport default codeReducer;\r\n","import { createStore, combineReducers, applyMiddleware, compose } from \"redux\";\r\n\r\nimport chatBotReducer from \"../reducers/chatBotReducer\";\r\nimport tabsReducer from \"../reducers/tabsReducer\";\r\nimport codeReducer from \"../reducers/codeReducer\";\r\n\r\nimport thunk from \"redux-thunk\";\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\nconst store = createStore(\r\n  combineReducers({ chatBotReducer, tabsReducer, codeReducer }),\r\n  {},\r\n  composeEnhancers(applyMiddleware(thunk))\r\n);\r\nexport default store;\r\n//   store.subscribe(()=>{\r\n//   console.log('Store Updated::',store.getState());\r\n//   });\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./Components/App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport { Provider } from \"react-redux\";\nimport store from \"./store/store\";\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}